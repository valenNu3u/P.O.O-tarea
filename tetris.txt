using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Tetris
{
    public class Bloque
    {
        public int Col { get; set; }
        public int Fila { get; set; }
        public ConsoleColor Color { get; set; }

        public Bloque(int col, int fila, ConsoleColor color)
        {
            Col = col;
            Fila = fila;
            Color = color;
        }
    }

    public abstract class Pieza
    {
        protected int[,] formaActual;
        protected int colInicial;
        protected int filaInicial;
        protected ConsoleColor color;

        public List<Bloque> Bloques { get; private set; }

        protected abstract int[,] ObtenerFormaInicial();

        public Pieza(int colInicial, int filaInicial)
        {
            formaActual = ObtenerFormaInicial();
            color = ObtenerColor();
            this.colInicial = colInicial;
            this.filaInicial = filaInicial;
            ActualizarBloques();
        }

        protected abstract ConsoleColor ObtenerColor();

        protected void ActualizarBloques()
        {
            Bloques = new List<Bloque>();
            for (int fila = 0; fila < formaActual.GetLength(0); fila++)
            {
                for (int col = 0; col < formaActual.GetLength(1); col++)
                {
                    if (formaActual[fila, col] == 1)
                    {
                        Bloques.Add(new Bloque(colInicial + col * 2, filaInicial + fila, color)); // Colocando con un espacio entre bloques
                    }
                }
            }
        }

        public void Mover(int dCol, int dFila)
        {
            colInicial += dCol;
            filaInicial += dFila;
            ActualizarBloques();
        }

        public void Rotar()
        {
            int[,] nuevaForma = new int[formaActual.GetLength(1), formaActual.GetLength(0)];
            for (int fila = 0; fila < formaActual.GetLength(0); fila++)
            {
                for (int col = 0; col < formaActual.GetLength(1); col++)
                {
                    nuevaForma[col, formaActual.GetLength(0) - fila - 1] = formaActual[fila, col];
                }
            }
            formaActual = nuevaForma;
            ActualizarBloques();
        }
    }

    public class PiezaI : Pieza
    {
        public PiezaI(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {1, 0, 1, 0, 1, 0, 1}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Cyan;
        }
    }

    public class PiezaO : Pieza
    {
        public PiezaO(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {1, 1, 1},
                {1, 1, 1},
                {1, 1, 1}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Yellow;
        }
    }

    public class PiezaT : Pieza
    {
        public PiezaT(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {0, 1, 0},
                {1, 1, 1},
                {1, 0, 1},
                {0, 1, 0}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Magenta;
        }
    }

    public class PiezaS : Pieza
    {
        public PiezaS(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {0, 1, 1, 1},
                {1, 1, 0, 0},
                {0, 1, 1, 1}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Green;
        }
    }

    public class PiezaZ : Pieza
    {
        public PiezaZ(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {1, 1, 0, 0},
                {0, 1, 1, 1},
                {1, 1, 0, 0}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Red;
        }
    }

    public class PiezaJ : Pieza
    {
        public PiezaJ(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {1, 0, 0},
                {1, 1, 1},
                {1, 0, 0},
                {1, 0, 0}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.Blue;
        }
    }

    public class PiezaL : Pieza
    {
        public PiezaL(int colInicial, int filaInicial) : base(colInicial, filaInicial) { }

        protected override int[,] ObtenerFormaInicial()
        {
            return new int[,]
            {
                {0, 0, 1},
                {1, 1, 1},
                {0, 0, 1},
                {0, 0, 1}
            };
        }

        protected override ConsoleColor ObtenerColor()
        {
            return ConsoleColor.DarkYellow;
        }
    }

    public class TetrisGame
    {
        private const int BoardWidth = 80;
        private const int BoardHeight = 25;
        private List<Bloque> bloquesFijos = new List<Bloque>();
        private Pieza piezaActual;
        private bool juegoTerminado;
        private static readonly Random rand = new Random();

        private void MostrarBloques()
        {
            Console.Clear();
            foreach (var bloque in bloquesFijos)
            {
                Console.SetCursorPosition(bloque.Col, bloque.Fila);
                Console.ForegroundColor = bloque.Color;
                Console.Write("■");
            }
            foreach (var bloque in piezaActual.Bloques)
            {
                Console.SetCursorPosition(bloque.Col, bloque.Fila);
                Console.ForegroundColor = bloque.Color;
                Console.Write("■");
            }
            Console.ResetColor();
        }

        private void EliminarFilasCompletas()
        {
            for (int fila = BoardHeight - 1; fila >= 0; fila--)
            {
                if (bloquesFijos.Count(b => b.Fila == fila) == BoardWidth / 2)
                {
                    var bloquesEnFila = bloquesFijos.Where(b => b.Fila == fila).ToList();
                    foreach (var bloque in bloquesEnFila)
                    {
                        bloquesFijos.Remove(bloque);
                    }
                    foreach (var bloque in bloquesFijos.Where(b => b.Fila < fila))
                    {
                        bloque.Fila++;
                    }
                    fila++; // Volvemos a comprobar la fila actual después de desplazar los bloques hacia abajo
                }
            }
        }

        private void ProcesarEntradaUsuario()
        {
            if (Console.KeyAvailable)
            {
                var tecla = Console.ReadKey(true).Key;
                switch (tecla)
                {
                    case ConsoleKey.LeftArrow:
                        if (piezaActual.Bloques.All(b => b.Col > 0) && piezaActual.Bloques.All(b => !bloquesFijos.Any(f => f.Col == b.Col - 2 && f.Fila == b.Fila)))
                        {
                            piezaActual.Mover(-2, 0);
                        }
                        break;
                    case ConsoleKey.RightArrow:
                        if (piezaActual.Bloques.All(b => b.Col < BoardWidth - 2) && piezaActual.Bloques.All(b => !bloquesFijos.Any(f => f.Col == b.Col + 2 && f.Fila == b.Fila)))
                        {
                            piezaActual.Mover(2, 0);
                        }
                        break;
                    case ConsoleKey.DownArrow:
                        if (piezaActual.Bloques.All(b => b.Fila < BoardHeight - 1) && piezaActual.Bloques.All(b => !bloquesFijos.Any(f => f.Col == b.Col && f.Fila == b.Fila + 1)))
                        {
                            piezaActual.Mover(0, 1);
                        }
                        break;
                    case ConsoleKey.Spacebar:
                        while (piezaActual.Bloques.All(b => b.Fila < BoardHeight - 1) && piezaActual.Bloques.All(b => !bloquesFijos.Any(f => f.Col == b.Col && f.Fila == b.Fila + 1)))
                        {
                            piezaActual.Mover(0, 1);
                        }
                        break;
                    case ConsoleKey.UpArrow:
                        piezaActual.Rotar();
                        break;
                }
            }
        }

        private void GenerarNuevaPieza()
        {
            int colInicial = BoardWidth / 2 - 1;
            int filaInicial = 0;
            int tipoPieza = rand.Next(7);

            piezaActual = tipoPieza switch
            {
                0 => new PiezaI(colInicial, filaInicial),
                1 => new PiezaO(colInicial, filaInicial),
                2 => new PiezaT(colInicial, filaInicial),
                3 => new PiezaS(colInicial, filaInicial),
                4 => new PiezaZ(colInicial, filaInicial),
                5 => new PiezaJ(colInicial, filaInicial),
                6 => new PiezaL(colInicial, filaInicial),
                _ => new PiezaI(colInicial, filaInicial)
            };
        }

        public void Jugar()
        {
            Console.CursorVisible = false;
            GenerarNuevaPieza();
            while (!juegoTerminado)
            {
                MostrarBloques();
                ProcesarEntradaUsuario();
                if (piezaActual.Bloques.All(b => b.Fila < BoardHeight - 1) && piezaActual.Bloques.All(b => !bloquesFijos.Any(f => f.Col == b.Col && f.Fila == b.Fila + 1)))
                {
                    piezaActual.Mover(0, 1);
                }
                else
                {
                    foreach (var bloque in piezaActual.Bloques)
                    {
                        bloquesFijos.Add(bloque);
                    }
                    EliminarFilasCompletas();
                    GenerarNuevaPieza();
                }
                Thread.Sleep(200);
            }
        }

        static void Main(string[] args)
        {
            var game = new TetrisGame();
            game.Jugar();
        }
    }
}
